name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Stage 1: Tests and coverage (formatting/linting handled by pre-commit)
  test-and-coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
    
    - name: Add UV to PATH
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    # Note: Code formatting, linting, and security scans are handled by pre-commit hooks
    # This ensures faster feedback and prevents poorly formatted code from reaching CI
    
    - name: Unit tests
      run: uv run pytest -m "not e2e" --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false  # Don't fail CI if Codecov upload fails

  # Stage 2: Build validation
  build-validation:
    runs-on: ubuntu-latest
    needs: test-and-coverage
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: docker build -t claude-code-test-2:${{ github.sha }} .
    
    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name test-app -p 5001:5001 claude-code-test-2:${{ github.sha }}
        
        # Wait for app to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:5001/health || exit 1
        
        # Cleanup
        docker stop test-app
        docker rm test-app

  # Stage 3: Full testing (including E2E)
  full-testing:
    runs-on: ubuntu-latest
    needs: [test-and-coverage, build-validation]
    services:
      flask-app:
        image: python:3.11-slim
        ports:
          - 5001:5001
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
    
    - name: Add UV to PATH
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Start Flask application
      run: |
        uv run python run.py &
        sleep 5
      env:
        FLASK_ENV: testing
        FLASK_PORT: 5001
    
    - name: Install Chrome for E2E tests
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
    
    - name: Run integration tests
      run: uv run pytest -m integration -v
      env:
        PYTHONPATH: .
    
    - name: Run E2E tests
      run: uv run pytest -m e2e -v
      env:
        PYTHONPATH: .
        TEST_URL: http://localhost:5001
        CI: true
    
    - name: Generate full coverage report
      run: uv run pytest --cov=app --cov-report=html --cov-report=term-missing --cov-fail-under=95
      env:
        PYTHONPATH: .
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  # Stage 4: Security and quality checks
  security-quality:
    runs-on: ubuntu-latest
    needs: test-and-coverage
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
    
    - name: Add UV to PATH
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Run security audit
      run: uv run pip-audit || true  # Don't fail CI on audit issues
    
    - name: Check for known vulnerabilities
      run: uv run safety check || true  # Don't fail CI on safety issues

  # Stage 5: Deployment preparation (only on main branch)
  deployment-prep:
    runs-on: ubuntu-latest
    needs: [build-validation, full-testing, security-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and tag for deployment
      run: |
        docker build -t claude-code-test-2:latest .
        docker build -t claude-code-test-2:${{ github.sha }} .
    
    - name: Save Docker image
      run: docker save claude-code-test-2:latest | gzip > app-image.tar.gz
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: app-image.tar.gz
        retention-days: 7